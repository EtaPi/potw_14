# Rakefile

require 'rake'

OPTS = "-Wall -Wextra -Wpedantic -Wstrict-overflow -march=native"

task default: ["src", "test"]

directory "build/src"
directory "build/test"
directory "build/lib"
directory "bin"

task :build => "src:build"
task :test => "test:run"
task :clean => ["src:clean", "lib:clean", "test:clean"]

namespace "src" do
  src_files = Rake::FileList["src/*.c"]

  src_objs = src_files.map do |f|
    File.join("build/", f.ext( '.o' ) )
  end

  task :build => src_objs
  task :build => ["bin", "build/src"]
  task :build => "lib:build"
  task :build do
    lib_objs = Rake::FileList[ "build/lib/*.o" ].join " "

    src_files.each do |f|
      src_obj = File.join( "build", f.ext( '.o' ) )

      out = File.basename( f.ext( '' ) )
      puts "Compiling #{out}..."

      `clang #{src_obj} #{lib_objs} #{OPTS} -o bin/#{out}`
    end
  end

  task :clean do
    rm Rake::FileList["build/src/*"]
    rm Rake::FileList["bin/c*"]
  end
end

namespace "lib" do
  lib_objs = Rake::FileList["lib/*.c"].map do |f|
    File.join("build/", f.ext('.o') )
  end

  task :build => lib_objs
  task :build => ["bin", "build/lib"]

  task :clean do
    rm Rake::FileList["build/lib/*"]
  end
end

namespace "test" do
  test_objs = Rake::FileList["test/*.c"].map do |f|
    File.join("build/", f.ext('.o') )
  end

  task :build => test_objs
  task :build => ["bin", "build/test"]

  task :run => 'bin/runner' do
    exec( "./bin/runner" )
  end

  file 'bin/runner' => ["test:build", "lib:build"] do
    lib_objs = Rake::FileList["build/lib/*.o"].join " "

    `clang #{test_objs.join " "} #{lib_objs} #{OPTS} -o bin/runner`
  end

  task :clean do
    rm Rake::FileList["build/test/*"]
    rm_f "bin/runner"
  end
end

rule '.o' => ['.c'] do |t|
  puts "Compiling #{t.source}..."
  `clang #{t.source} #{OPTS} -c -o build/#{t.name}`
end

rule( /build\/.*\.o$/ => [ proc {|tn| tn.sub("build/", "").ext(".c")} ] ) do |t|
  puts "Compiling #{t.source}..."
  `clang #{t.source} #{OPTS} -c -o #{t.name}`
end
